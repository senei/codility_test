<!DOCTYPE html>
<html>

<head>
    <title>Peaks - codility</title>
    <meta charset="UTF-8">
    <meta name="description" content="Divide an array into the maximum number of same((-))sized blocks, each of which should contain an index P such that A[P - 1] < A[P] > A[P + 1].">
    <meta name="author" content="senei">
</head>

<script type="text/javascript">
function solution(A) {
    var len = A.length;
    // array ends can't be peaks, len < 3 must return 0    
    if (len < 3)
        return 0;

    var peaks = Array.apply(null, new Array(len)).map(function() {
        return 0;
    });

    // compute a list of 'peaks to the left' in O(n) time
    for (var i = 2; i < len; i++) {
        peaks[i] = peaks[i - 1];

        // check if there was a peak to the left, add it to the count
        if (A[i - 1] > A[i - 2] && A[i - 1] > A[i])
            peaks[i] += 1;
    }

    // candidate is the block size we're going to test
    for (i = 3; i < len + 1; i++) {

        // skip if not a factor
        if (len % i !== 0)
            continue;

        // test at each point n / block
        valid = 1;
        index = i;
        while (index != len) {

            // if no peak in this block, break
            if (peaks[index] == peaks[index - i]) {
                valid = 0;
                break;
            }
            index += i;
        }
        // one additional check since peaks[length] is outside of array    
        if (index == len && peaks[index - 1] == peaks[index - i]) {
            valid = 0;
        }

        if (valid)
            return len / i;
    }
    return 0;
}
</script>

<body>
    <p>Task name: Peaks
        <br/>Divide an array into the maximum number of same((-))sized blocks, each of which should contain an index P such that A[P - 1] &lt; A[P] > A[P + 1].</p>
    <br/>
    <a href="https://codility.com/programmers/lessons/8">codility.com/programmers/lessons/8</a>
    <br/>
    <p>A non-empty zero-indexed array A consisting of N integers is given.</p>
    <p>
        A peak is an array element which is larger than its neighbors. More precisely, it is an index P such that 0 &lt; P &lt; N − 1, A[P − 1] &lt; A[P] and A[P] > A[P + 1].</p>
    <p>For example, the following array A:</p>
    <code>A[0] = 1
        <br/>A[1] = 2
        <br/>A[2] = 3
        <br/>A[3] = 4
        <br/>A[4] = 3
        <br/>A[5] = 4
        <br/>A[6] = 1
        <br/>A[7] = 2
        <br/>A[8] = 3
        <br/>A[9] = 4
        <br/>A[10] = 6
        <br/>A[11] = 2</code>
    <p>has exactly three peaks: 3, 5, 10.</p>
    <p>We want to divide this array into blocks containing the same number of elements. More precisely, we want to choose a number K that will yield the following blocks:</p>
    <code>
        <br/>A[0], A[1], ..., A[K − 1],
        <br/>A[K], A[K + 1], ..., A[2K − 1],
        <br/>...
        <br/>A[N − K], A[N − K + 1], ..., A[N − 1].</code>
    <p>What's more, every block should contain at least one peak. Notice that extreme elements of the blocks (for example A[K − 1] or A[K]) can also be peaks, but only if they have both neighbors (including one in an adjacent blocks).</p>
    <p>The goal is to find the maximum number of blocks into which the array A can be divided.</p>
    <p>Array A can be divided into blocks as follows:</p>
    <code>
        one block (1, 2, 3, 4, 3, 4, 1, 2, 3, 4, 6, 2). This block contains three peaks.
        <br/>two blocks (1, 2, 3, 4, 3, 4) and (1, 2, 3, 4, 6, 2). Every block has a peak.
        <br/>three blocks (1, 2, 3, 4), (3, 4, 1, 2), (3, 4, 6, 2). Every block has a peak. Notice in particular that the first block (1, 2, 3, 4) has a peak at A[3], because A[2] &lt; A[3] > A[4], even though A[4] is in the adjacent block.
    </code>
    <p>However, array A cannot be divided into four blocks, (1, 2, 3), (4, 3, 4), (1, 2, 3) and (4, 6, 2), because the (1, 2, 3) blocks do not contain a peak. Notice in particular that the (4, 3, 4) block contains two peaks: A[3] and A[5].</p>
    <p>The maximum number of blocks that array A can be divided into is three.</p>
    <p>Write a function:</p>
    <code>function solution(A);</code>
    <p>that, given a non-empty zero-indexed array A consisting of N integers, returns the maximum number of blocks into which A can be divided.</p>
    <p>If A cannot be divided into some number of blocks, the function should return 0.</p>
    <p>For example, given:</p>
    <code>A[0] = 1
        <br/>A[1] = 2
        <br/>A[2] = 3
        <br/>A[3] = 4
        <br/>A[4] = 3
        <br/>A[5] = 4
        <br/>A[6] = 1
        <br/>A[7] = 2
        <br/>A[8] = 3
        <br/>A[9] = 4
        <br/>A[10] = 6
        <br/>A[11] = 2</code>
    <p>the function should return 3, as explained above.</p>


</body>

</html>
