<!DOCTYPE html>
<html>

<head>
    <title>Nesting - codility</title>
    <meta charset="UTF-8">
    <meta name="description" content="Determine whether given string of parentheses is properly nested.">
    <meta name="author" content="senei">
</head>

<script type="text/javascript">
function solution(S) {
    if (S.length % 2 == 1)
        return 0;
    stack = [];
    num = 0;
    for (i = 0; i < S.length; i++) {
        // push the '(' into the stack
        if (S.charAt(i) == '(')
            stack[num++] = S.charAt(i);
        // if the stack is not empty, pop the top element out.
        else if (num !== 0)
            num--;
        // other situation means it's not a nested string
        else
            return 0;
    }
    if (num === 0)
        return 1;
    else
        return 0;
}
</script>

<body>
    <p>Task name: Nesting
        <br/>Determine whether given string of parentheses is properly nested.</p>
    <br/>
    <a href="https://codility.com/programmers/lessons/5">codility.com/programmers/lessons/5</a>
    <br/>
    <p>A string S consisting of N characters is called properly nested if:</p>
    <code>S is empty;
        <br/>S has the form "(U)" where U is a properly nested string;
        <br/>S has the form "VW" where V and W are properly nested strings.</code>
    <p>For example, string "(()(())())" is properly nested but string "())" isn't.</p>
    <p>Write a function:</p>
    <code>int solution(char *S);</code>
    <p>that, given a string S consisting of N characters, returns 1 if string S is properly nested and 0 otherwise.</p>
    <p>For example, given S = "(()(())())", the function should return 1 and given S = "())", the function should return 0, as explained above.</p>


</body>

</html>
