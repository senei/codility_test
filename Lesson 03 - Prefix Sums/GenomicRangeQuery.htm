<!DOCTYPE html>
<html>

<head>
    <title>GenomicRangeQuery - codility</title>
    <meta charset="UTF-8">
    <meta name="description" content="Find the minimal nucleotide from a range of sequence DNA.">
    <meta name="author" content="senei">
</head>

<script type="text/javascript">
function solution(S, P, Q) {
    //used jagged array to hold the prefix sums of each A, C and G genoms
    //we don't need to get prefix sums of T, you will see why.
    var genoms = new Array(3);
    genoms[0] = [];
    genoms[1] = [];
    genoms[2] = [];
    //if the char is found in the index i, then we set it to be 1 else they are 0
    for (var i = 0; i < S.length; i++) {
        genoms[0][i] = 0;
        genoms[1][i] = 0;
        genoms[2][i] = 0;
    }
    // 3 short values are needed for this reason
    var a, c, g;
    for (i = 0; i < S.length; i++) {
        a = 0;
        c = 0;
        g = 0;
        if ('A' == (S.charAt(i))) {
            a = 1;
        }
        if ('C' == (S.charAt(i))) {
            c = 1;
        }
        if ('G' == (S.charAt(i))) {
            g = 1;
        }
        //here we calculate prefix sums. To learn what's prefix sums look at here https://codility.com/media/train/3-PrefixSums.pdf
        genoms[0][i + 1] = genoms[0][i] + a;
        genoms[1][i + 1] = genoms[1][i] + c;
        genoms[2][i + 1] = genoms[2][i] + g;
    }

    var result = new Array(P.length);
    //here we go through the provided P[] and Q[] arrays as intervals
    for (i = 0; i < P.length; i++) {
        var fromIndex = P[i] + 1;
        var toIndex = Q[i] + 1;
        if (genoms[0][toIndex] - genoms[0][fromIndex - 1] > 0) {
            result[i] = 1;
        } else if (genoms[1][toIndex] - genoms[1][fromIndex - 1] > 0) {
            result[i] = 2;
        } else if (genoms[2][toIndex] - genoms[2][fromIndex - 1] > 0) {
            result[i] = 3;
        } else {
            result[i] = 4;
        }
    }

    return result;
}
</script>

<body>
    <p>Task name: GenomicRangeQuery
        <br/>Find the minimal nucleotide from a range of sequence DNA.</p>
    <br/>
    <a href="https://codility.com/programmers/lessons/3">codility.com/programmers/lessons/3</a>
    <br/>
    <p>A DNA sequence can be represented as a string consisting of the letters A, C, G and T, which correspond to the types of successive nucleotides in the sequence. Each nucleotide has an impact factor, which is an integer. Nucleotides of types A, C, G and T have impact factors of 1, 2, 3 and 4, respectively. You are going to answer several queries of the form: What is the minimal impact factor of nucleotides contained in a particular part of the given DNA sequence?</p>
    <p>The DNA sequence is given as a non-empty string S = S[0]S[1]...S[N-1] consisting of N characters. There are M queries, which are given in non-empty arrays P and Q, each consisting of M integers. The K-th query (0 â‰¤ K &lt; M) requires you to find the minimal impact factor of nucleotides contained in the DNA sequence between positions P[K] and Q[K] (inclusive).</p>
    <p>For example, consider string S = CAGCCTA and arrays P, Q such that:</p>
    <code>
        P[0] = 2 Q[0] = 4
        <br/>P[1] = 5 Q[1] = 5
        <br/>P[2] = 0 Q[2] = 6
    </code>
    <p>
        The answers to these M = 3 queries are as follows:</p>
    <p>
        The part of the DNA between positions 2 and 4 contains nucleotides G and C (twice), whose impact factors are 3 and 2 respectively, so the answer is 2.</p>
    <p>
        The part between positions 5 and 5 contains a single nucleotide T, whose impact factor is 4, so the answer is 4.</p>
    <p>
        The part between positions 0 and 6 (the whole string) contains all nucleotides, in particular nucleotide A whose impact factor is 1, so the answer is 1.</p>
    <p>
        Write a function:</p>
    <code>
        function solution(S, P, Q);</code>
    <p>that, given a non-empty zero-indexed string S consisting of N characters and two non-empty zero-indexed arrays P and Q consisting of M integers, returns an array consisting of M integers specifying the consecutive answers to all queries.</p>
    <p>The sequence should be returned as an array of integers (in any other programming language).</p>
    <p>For example, given the string S = CAGCCTA and arrays P, Q such that:</p>
    <code>
        P[0] = 2 Q[0] = 4
        <br/>P[1] = 5 Q[1] = 5
        <br/>P[2] = 0 Q[2] = 6
    </code>
    <p>
        the function should return the values [2, 4, 1], as explained above.</p>


</body>

</html>
